% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/02-importData.R
\name{importDataUI}
\alias{importDataUI}
\alias{importDataServer}
\title{Data import module}
\usage{
importDataUI(id, label = "Import Data")

importDataServer(
  id,
  title = "",
  defaultSource = c("ckan", "file", "url", "remoteModel"),
  ckanFileTypes = c("xls", "xlsx", "csv", "odt", "txt"),
  ignoreWarnings = FALSE,
  importType = c("data", "model", "zip", "list"),
  rowNames = reactiveVal(NULL),
  colNames = reactiveVal(NULL),
  customWarningChecks = list(),
  customErrorChecks = list(),
  batch = FALSE,
  outputAsMatrix = FALSE,
  fileExtension = "zip",
  mainFolder = NULL,
  subFolder = NULL,
  rPackageName = "",
  onlySettings = FALSE,
  expectedFileInZip = c(),
  options = importOptions()
)
}
\arguments{
\item{id}{id of module}

\item{label}{label of button}

\item{title}{title of import module}

\item{defaultSource}{(character) default source for input "Source", e.g. "ckan", "file", or "url"}

\item{ckanFileTypes}{(character) file types allowed for import from Pandora ("ckan"). E.g. for
`importType = "data"`: c("xls", "xlsx", "csv", "odt", "txt"); for `importType = "zip"`: c("zip");
 for `importType = "list"`: c("json")}

\item{ignoreWarnings}{(logical) TRUE to enable imports in case of warnings}

\item{importType}{(character) DEPRECATED. type of import, either "data", "model", "zip" or "list".
ImportType == "model" expects a zip file containing a model. The file will be unzipped,
the model object extracted, and checked if it is valid for the app.
ImportType == "zip" enables the optional parameter 'expectedFileInZip'. The file is validated
and the path to the zip file will be returned.}

\item{rowNames}{(reactive) use this for rownames of imported data.}

\item{colNames}{(reactive) use this for colnames of imported data.}

\item{customWarningChecks}{list of reactive(!) functions which will be executed after importing
of data.
 functions need to return TRUE if check is successful or a character with a warning otherwise.}

\item{customErrorChecks}{list of reactive(!) functions which will be executed after importing
of data.
  functions need to return TRUE if check is successful or a character with a warning otherwise.}

\item{batch}{(logical) use batch import.}

\item{outputAsMatrix}{(logical) TRUE if output must be a matrix,
e.g. for batch = TRUE in Resources.}

\item{fileExtension}{(character) (otional) app specific file extension, e.g. "resources", "bmsc",
"bpred", or (app-unspecific) "zip". Only files with this extension are valid for import.}

\item{mainFolder}{(character) DEPRECATED. folder containing all loadable .zip files.}

\item{subFolder}{(character) (optional) subfolder containing loadable .zip files.
This parameter is ignored if importType == "data"}

\item{rPackageName}{(character) DEPRECATED. Instead, please use
\code{options = importOptions(rPackageName = <your package>)}.}

\item{onlySettings}{(logical) if TRUE allow only upload of user inputs and user data.
This parameter is ignored if importType == "data"}

\item{expectedFileInZip}{(character) (optional) This parameter is ignored if importType != "zip".
File names that must be contained in the zip upload.}

\item{options}{(list) Extra options for the import module. See \code{\link{importOptions}}.}
}
\description{
Displays a button which opens an import dialog when clicked. Wrapper around
\code{\link{importUI}} with default label "Import Data".

Backend for data import module
}
